7/31/25:

- Round corners of gameboards in css
- Remove initial testing set up functions
- Remove unnecessary comments
- Add alert notification when computer sinks a player ship

7/30/25:

- Fix pass device screen not showing during turn switch
- Add "pass device" screen for human vs human games between player turns and when placing ships 
- Add auto-randomization and placement for ships if player 2 is computer
- Add start game button functionality
- Opposing player ships are hidden during placement phase
- Add player 1 and player 2 confirmation buttons for ship placement
- Add game state tracking to appController to allow buttons to be shown conditionally
- Add randomize player 1 and player 2 ship placement functionality

7/29/25:

- Begin general set up of randomizeShips and startGame functions for associated buttons
- Create Player 1 + Player 2 Randomize Ships buttons and Start Game buttons
- Add notification for when a player's ship is sunk
- Change display to hide enemy ships in human vs human games
- Fix new game starting with stored player information after returning to home from the play screen
- Create checkEndgame and triggerEndgame to check for end game conditions and trigger end of game when all ships on one board are sunk
- Add computer AI to target cells adjacent to successful attacks

7/28/25:

- Trigger resetScore automatically when new game button is pressed
- Add resetScore button functionality
- Change missed attack display color to medium grey
- Fix player creation to always create human type players
- Allow computer attack to happen automatically with small delay for realism
- Modify attackOpponentBoard to allow the computer to make basic randomized attacks

7/26/25:

- Update Player 2's name display to default to Computer
- Update score and turn display to reflect custom player names
- Add new player 2 button
- Change new game button on gameplay screen to new round
- Add prompt to get player information
- Remove manual change turn button
- Add full attack functionality with board display update and changing turns
- Add eventListener to grid cells to make them clickable and return the coordinates and board of the clicked cell

7/25/25:

- Create button to manually change player turn to test functionality
- Add player score display
- Create switchPlayerTurn and getActivePlayer to handle changing the active player

7/24/25:

- Create Home button to return to main page from game screen
- Add New Game button functionality while keeping test game for development
- Create appController to handle moving between home screen and gameplay states

7/23/25:

- Add darker color to grid cells when hovered for selection clarity
- Create New Game button and add event listener
- Add A - J / 1 - 10 gameboard grid coordinates
- Add basic css to display player gameboards and ships
- Create renderGameboards with renderSingleBoard helper function to handle gameboard creation for each player
- Create index.js to handle script imports for index.html to control load order

7/22/25:

- Begin basic layout setup
- Set up displayController file to handle displaying player gameboards
- Create test to check that all ships are correctly placed 
- Create verifyShipPlacement helper function 
- Create test to make sure both player boards are populated with 5 unique ships
- Create test to check that player boards are unique
- Create helper functions getCell and setCell to help with x/y coordinate clarity
- Update temporary player ship coordinates to be inverted/mirrored from one another
- Fix x/y coordinates being inverted and update relevant tests to pass with fixed code

7/21/25:

- Create placeShipsForTesting and placeAllShips functions to handle placing ships and their coordinates
- Create basic newGame function to handle calling gameboard and player creation and populating ships
- Create allShips array to allow createFleet to create ships for players
- Set up gameController to handle game management and DOM actions
- Clarify file names (dom.js to layout.js, main.js to gameController.js)
- Create test for individual player gameboards
- Create check that doesn't allow players to select out of bounds attacks and associated test

7/19/25:

- Set up test to ensure players can't select out of bounds attacks
- Create clearBoard and accompanying test 
- Create Player class accompanying test for real and computer players

7/18/25:

- Create Player class
- Create allShipsSunk and accompanying test
- Create receiveAttack and accompanying test

7/17/25:

- Create placeShip and accompanying test
- Create Gameboard factory and accompanying test
- Create hit and isSunk functions and accompanying tests
- Create Ship class constructor and accompanying test

7/16/25:

- Set up basic files that will be needed